{"version":3,"file":"static/js/562.35d91a95.chunk.js","mappings":"sPACA,GAAgB,UAAY,wBAAwB,KAAO,mBAAmB,WAAa,yBAAyB,WAAa,yBAAyB,gBAAkB,8BAA8B,MAAQ,qB,6DCiElN,EA1Da,WACX,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,sGAEZJ,GAAW,GAFC,UAGWK,EAAAA,EAAAA,GAAaJ,GAHxB,gBAGJK,EAHI,EAGJA,KACRR,EAAQQ,GACRN,GAAW,GALC,kDAOZO,QAAQC,IAAR,MAPY,yBASZR,GAAW,GATC,6EAAH,qDAYbI,GACD,GAAE,CAACH,KAGF,8BACGF,EACC,aACEF,GAAQA,EAAKY,OAAS,GACxB,gBAAKC,UAAWC,EAAAA,WAAhB,UACE,eAAID,UAAWC,EAAAA,KAAf,SACGd,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,GAAlC,OACR,gBAAaN,UAAWC,EAAAA,WAAxB,UACGI,GACC,gBACEL,UAAWC,EAAAA,UACXM,IAAKJ,EACLK,IAAG,wCAAmCH,MAGxC,gBAAKL,UAAWC,EAAAA,UAAeM,IAAKJ,EAAMK,IAAKC,KAGjD,cAAGT,UAAWC,EAAAA,WAAd,SAA+BE,KAC/B,cAAGH,UAAWC,EAAAA,gBAAd,SAAoCG,MAZ7BE,EADD,SAmBd,cAAGN,UAAWC,EAAAA,MAAd,4BAIP,C,4GC1DKS,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACRC,QAAS,mCACTC,SAAU,WAIP,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BW,GAA5B,kFACGU,EADH,iBACqBV,EADrB,8BAGoBI,EAASO,IAAID,GAHjC,uBAGK7B,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAe+B,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kFACGH,EADH,8BACkCG,GADlC,kBAGoBT,EAASO,IAAID,GAHjC,uBAGK7B,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H","sources":["webpack://react-homework-template/./src/components/cast/cast.module.css?44e2","components/cast/Cast.jsx","services/serviceAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list__img\":\"cast_list__img__d8Ccw\",\"list\":\"cast_list__6F4cJ\",\"list__item\":\"cast_list__item__KQ8LV\",\"list__name\":\"cast_list__name__IcKeL\",\"list__character\":\"cast_list__character__7iZFB\",\"error\":\"cast_error__jQRSc\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCast } from 'services/serviceAPI';\nimport css from './cast.module.css';\nimport PropTypes from 'prop-types';\n\nimport userImg from './image.jpg';\n\nconst Cast = () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const { cast } = await getMovieCast(movieId);\n        setData(cast);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? (\n        'Loading...'\n      ) : data && data.length > 0 ? (\n        <div className={css.list__wrap}>\n          <ul className={css.list}>\n            {data.map(({ name, character, profile_path, id }) => (\n              <li key={id} className={css.list__item}>\n                {profile_path ? (\n                  <img\n                    className={css.list__img}\n                    alt={name}\n                    src={`https://image.tmdb.org/t/p/w92${profile_path}`}\n                  />\n                ) : (\n                  <img className={css.list__img} alt={name} src={userImg} />\n                )}\n\n                <p className={css.list__name}>{name}</p>\n                <p className={css.list__character}>{character}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <p className={css.error}>No data found</p>\n      )}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.number,\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n    api_key: 'f83854a9f07b692049f953a5cb8c1e39',\n    language: 'en-US',\n    },\n});\n\nexport async function getMovieCast(id) {\n    const query = `/movie/${id}/credits`;\n    try {\n    const { data } = await instance.get(query);\n    return data;\n    } catch (error) {\n    throw error;\n    }\n}\n\nexport async function searchMovie(queryString) {\n    const query = `/search/movie?query=${queryString}`;\n    try {\n    const { data } = await instance.get(query);\n    return data;\n    } catch (error) {\n    throw error;\n    }\n}"],"names":["useState","data","setData","loading","setLoading","movieId","useParams","useEffect","getData","getMovieCast","cast","console","log","length","className","css","map","name","character","profile_path","id","alt","src","userImg","instance","axios","baseURL","params","api_key","language","query","get","searchMovie","queryString"],"sourceRoot":""}